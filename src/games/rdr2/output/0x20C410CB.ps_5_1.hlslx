struct anon_m {
  float4 _m0;
  uint4 _m1;
  uint4 _m2;
  uint4 _m3;
  uint4 _m4;
  uint3 _m5;
};

cbuffer CB0_buf : register(b0, space0) {
  uint4 CB0_m0 : packoffset(c0);
  uint4 CB0_m1 : packoffset(c1);
  uint4 CB0_m2 : packoffset(c2);
  uint4 CB0_m3 : packoffset(c3);
  uint4 CB0_m4 : packoffset(c4);
  uint4 CB0_m5 : packoffset(c5);
  uint4 CB0_m6 : packoffset(c6);
  float4 CB0_m7 : packoffset(c7);
  float4 CB0_m8 : packoffset(c8);
  float CB0_m9 : packoffset(c9);
  uint CB0_m10 : packoffset(c9.y);
  uint CB0_m11 : packoffset(c9.z);
  uint CB0_m12 : packoffset(c9.w);
  uint4 CB0_m13 : packoffset(c10);
};

cbuffer CB1_buf : register(b1, space0) {
  float4 CB1_m0 : packoffset(c0);
  uint4 CB1_m1 : packoffset(c1);
  uint4 CB1_m2 : packoffset(c2);
  float4 CB1_m3 : packoffset(c3);
};

ByteAddressBuffer T0 : register(t4, space0);
SamplerState S0 : register(s2, space0);
SamplerState S1 : register(s3, space0);
Texture2D<float4> T1 : register(t5, space0);
Texture3D<float4> T2 : register(t6, space0);

static float2 TEXCOORD;
static float4 SV_Target;

struct SPIRV_Cross_Input {
  float2 TEXCOORD : TEXCOORD1;
};

struct SPIRV_Cross_Output {
  float4 SV_Target : SV_Target0;
};

float dp3_f32(float3 a, float3 b) {
  precise float _81 = a.x * b.x;
  return mad(a.z, b.z, mad(a.y, b.y, _81));
}

void frag_main() {
  float4 _102 = T1.Sample(S1, float2(TEXCOORD.x, TEXCOORD.y));
  float _121 = mad(_102.x, CB0_m8.x, CB0_m7.x);
  float _122 = mad(_102.y, CB0_m8.y, CB0_m7.y);
  float _123 = mad(_102.z, CB0_m8.z, CB0_m7.z);
  float _124 = mad(_102.w, CB0_m8.w, CB0_m7.w);
  if (_124 < 1.0f) {
    discard;
  }
  float _144;
  float _145;
  float _146;
  if (CB0_m13.x != 0u) {
    float4 _140 = T2.SampleLevel(S0, float3(_121, _122, _123), 0.0f);
    _144 = _140.z;
    _145 = _140.y;
    _146 = _140.x;
  } else {
    _144 = _123;
    _145 = _122;
    _146 = _121;
  }
  float _198;
  float _199;
  float _200;
  if (CB0_m10 != 0u) {
    float3 _152 = float3(_146, _145, _144);
    float _171 = exp2(log2(abs((dp3_f32(float3(0.6274039745330810546875f, 0.329281985759735107421875f, 0.043313600122928619384765625f), _152) * CB1_m0.x) / CB1_m3.w)) * 0.1593017578125f);
    float _181 = exp2(log2(abs((dp3_f32(float3(0.06909699738025665283203125f, 0.919539988040924072265625f, 0.0113612003624439239501953125f), _152) * CB1_m0.x) / CB1_m3.w)) * 0.1593017578125f);
    float _191 = exp2(log2(abs((dp3_f32(float3(0.01639159955084323883056640625f, 0.0880132019519805908203125f, 0.895595014095306396484375f), _152) * CB1_m0.x) / CB1_m3.w)) * 0.1593017578125f);
    _198 = exp2(log2(mad(_191, 18.8515625f, 0.8359375f) / mad(_191, 18.6875f, 1.0f)) * 78.84375f);
    _199 = exp2(log2(mad(_181, 18.8515625f, 0.8359375f) / mad(_181, 18.6875f, 1.0f)) * 78.84375f);
    _200 = exp2(log2(mad(_171, 18.8515625f, 0.8359375f) / mad(_171, 18.6875f, 1.0f)) * 78.84375f);
  } else {
    _198 = _144;
    _199 = _145;
    _200 = _146;
  }
  bool _203 = CB0_m9 == 0.0f;
  float _214 = _124 * asfloat(T0.Load(12));
  SV_Target.z = (asfloat(T0.Load(12)) != 1.0f) ? (_214 * _214) : (_203 ? _198 : (_124 * _198));
  float _222 = _124 * asfloat(T0.Load(0));
  float _228 = (CB0_m11 != 0u) ? (_222 * asfloat(CB0_m11)) : _222;
  SV_Target.w = clamp((CB0_m13.y != 0u) ? ((CB0_m12 != 0u) ? ((cos(_228 * 3.1415927410125732421875f) - 1.0f) * (-0.5f)) : _228) : _222, 0.0f, 1.0f);
  SV_Target.x = _203 ? _200 : (_124 * _200);
  SV_Target.y = _203 ? _199 : (_124 * _199);
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input) {
  TEXCOORD = stage_input.TEXCOORD;
  frag_main();
  SPIRV_Cross_Output stage_output;
  stage_output.SV_Target = SV_Target;
  return stage_output;
}
