Texture2D<float4> t0 : register(t0, space1);

Texture2D<float4> t1 : register(t2);

Texture3D<float4> t2 : register(t7);

cbuffer cb0 : register(b2) {
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
};

cbuffer cb1 : register(b3) {
  uint cb1_000x : packoffset(c000.x);
  uint cb1_001x : packoffset(c001.x);
};

cbuffer cb2 : register(b5) {
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_012w : packoffset(c012.w);
  float cb2_013z : packoffset(c013.z);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_019y : packoffset(c019.y);
  float cb2_025y : packoffset(c025.y);
};

cbuffer cb3 : register(b6) {
  float cb3_000x : packoffset(c000.x);
  float cb3_000y : packoffset(c000.y);
  float cb3_000z : packoffset(c000.z);
  float cb3_001x : packoffset(c001.x);
  float cb3_001y : packoffset(c001.y);
  float cb3_001z : packoffset(c001.z);
  float cb3_043x : packoffset(c043.x);
  float cb3_043y : packoffset(c043.y);
  float cb3_043z : packoffset(c043.z);
  float cb3_043w : packoffset(c043.w);
  float cb3_044x : packoffset(c044.x);
  float cb3_044y : packoffset(c044.y);
  float cb3_044z : packoffset(c044.z);
  float cb3_044w : packoffset(c044.w);
  float cb3_045x : packoffset(c045.x);
  float cb3_045y : packoffset(c045.y);
  float cb3_045z : packoffset(c045.z);
  float cb3_046x : packoffset(c046.x);
  float cb3_046y : packoffset(c046.y);
  float cb3_046z : packoffset(c046.z);
  float cb3_046w : packoffset(c046.w);
  float cb3_047x : packoffset(c047.x);
  float cb3_047y : packoffset(c047.y);
  float cb3_047z : packoffset(c047.z);
  float cb3_047w : packoffset(c047.w);
  float cb3_048x : packoffset(c048.x);
  float cb3_048y : packoffset(c048.y);
  float cb3_048z : packoffset(c048.z);
  float cb3_048w : packoffset(c048.w);
  float cb3_049x : packoffset(c049.x);
  float cb3_049y : packoffset(c049.y);
  float cb3_049z : packoffset(c049.z);
  float cb3_050x : packoffset(c050.x);
  float cb3_051x : packoffset(c051.x);
  float cb3_051y : packoffset(c051.y);
  float cb3_051z : packoffset(c051.z);
  float cb3_051w : packoffset(c051.w);
  float cb3_052x : packoffset(c052.x);
  float cb3_052y : packoffset(c052.y);
  float cb3_052z : packoffset(c052.z);
  float cb3_053x : packoffset(c053.x);
  float cb3_053y : packoffset(c053.y);
  float cb3_053z : packoffset(c053.z);
  float cb3_053w : packoffset(c053.w);
  float cb3_054x : packoffset(c054.x);
  float cb3_054y : packoffset(c054.y);
  float cb3_054z : packoffset(c054.z);
  float cb3_054w : packoffset(c054.w);
  float cb3_055x : packoffset(c055.x);
  float cb3_055y : packoffset(c055.y);
  float cb3_055z : packoffset(c055.z);
  float cb3_055w : packoffset(c055.w);
  float cb3_056x : packoffset(c056.x);
  float cb3_056y : packoffset(c056.y);
  float cb3_056z : packoffset(c056.z);
  float cb3_056w : packoffset(c056.w);
  float cb3_057x : packoffset(c057.x);
  float cb3_057y : packoffset(c057.y);
  float cb3_057z : packoffset(c057.z);
  float cb3_057w : packoffset(c057.w);
  float cb3_058x : packoffset(c058.x);
  float cb3_058y : packoffset(c058.y);
  float cb3_058z : packoffset(c058.z);
};

cbuffer cb4 : register(b7) {
  uint cb4_007x : packoffset(c007.x);
};

cbuffer cb5 : register(b10, space1) {
  float cb5_000x : packoffset(c000.x);
};

SamplerState s0 : register(s2, space1);

SamplerState s1[] : register(s0, space2);

float4 main(
  float4 COLOR : COLOR,
  linear float2 TEXCOORD : TEXCOORD,
  linear float3 TEXCOORD_1 : TEXCOORD1,
  linear float4 TEXCOORD_6 : TEXCOORD6,
  noperspective float4 SV_Position : SV_Position,
  linear float4 SV_ClipDistance : SV_ClipDistance
) : SV_Target {
  float4 SV_Target;
  uint _27 = (cb1_000x) + 0;
  float4 _29 = t0.Sample(s1[_27], float2((TEXCOORD.x), (TEXCOORD.y)));
  float _34 = dot(float3((TEXCOORD_1.x), (TEXCOORD_1.y), (TEXCOORD_1.z)), float3((TEXCOORD_1.x), (TEXCOORD_1.y), (TEXCOORD_1.z)));
  float _35 = rsqrt(_34);
  float _36 = _35 * (TEXCOORD_1.x);
  float _37 = _35 * (TEXCOORD_1.y);
  float _38 = _35 * (TEXCOORD_1.z);
  float _45 = (_29.w) * (COLOR.w);
  float _46 = (cb2_012z) * (COLOR.x);
  float _47 = (cb2_012y) * (COLOR.y);
  float _50 = (_29.w) * (COLOR.z);
  float _51 = _50 * (cb5_000x);
  float _52 = _51 * (cb2_012w);
  float _53 = (_29.x) * (_29.x);
  float _54 = (_29.y) * (_29.y);
  float _55 = (_29.z) * (_29.z);
  float _64 = -0.0f - (cb3_000x);
  float _65 = -0.0f - (cb3_000y);
  float _66 = -0.0f - (cb3_000z);
  float _67 = _46 * _46;
  float _68 = _47 * _47;
  float _69 = dot(float3(_36, _37, _38), float3(_64, _65, _66));
  float _70 = saturate(_69);
  float _71 = _70 * (cb3_001x);
  float _72 = _70 * (cb3_001y);
  float _73 = _70 * (cb3_001z);
  float _76 = (cb3_043w) + _38;
  float _79 = _76 * (cb3_044w);
  float _80 = max(0.0f, _79);
  float _85 = (cb3_047x) * _80;
  float _86 = (cb3_047y) * _80;
  float _87 = (cb3_047z) * _80;
  float _92 = _85 + (cb3_048x);
  float _93 = _86 + (cb3_048y);
  float _94 = _87 + (cb3_048z);
  float _95 = 1.0f - (cb2_013z);
  float _96 = _92 * _95;
  float _97 = _93 * _95;
  float _98 = _94 * _95;
  float _103 = (cb3_045x) * _80;
  float _104 = (cb3_045y) * _80;
  float _105 = (cb3_045z) * _80;
  float _110 = _103 + (cb3_046x);
  float _111 = _104 + (cb3_046y);
  float _112 = _105 + (cb3_046z);
  float _113 = _110 * (cb2_013z);
  float _114 = _111 * (cb2_013z);
  float _115 = _112 * (cb2_013z);
  float _116 = _113 + _96;
  float _117 = _114 + _97;
  float _118 = _115 + _98;
  float _119 = _116 * _68;
  float _120 = _117 * _68;
  float _121 = _118 * _68;
  float _125 = (cb3_043x) * _80;
  float _126 = (cb3_043y) * _80;
  float _127 = (cb3_043z) * _80;
  float _131 = _125 + (cb3_044x);
  float _132 = _126 + (cb3_044y);
  float _133 = _127 + (cb3_044z);
  float _137 = dot(float3((cb3_046w), (cb3_047w), (cb3_048w)), float3(_36, _37, _38));
  float _138 = saturate(_137);
  float _143 = (cb3_049x) * _138;
  float _144 = (cb3_049y) * _138;
  float _145 = (cb3_049z) * _138;
  float _146 = _131 + _143;
  float _147 = _132 + _144;
  float _148 = _133 + _145;
  float _149 = _146 * _67;
  float _150 = _147 * _67;
  float _151 = _148 * _67;
  float _152 = _71 + _52;
  float _153 = _152 + _119;
  float _154 = _153 + _149;
  float _155 = _53 * _154;
  float _156 = _72 + _52;
  float _157 = _156 + _120;
  float _158 = _157 + _150;
  float _159 = _54 * _158;
  float _160 = _73 + _52;
  float _161 = _160 + _121;
  float _162 = _161 + _151;
  float _163 = _55 * _162;
  float _165 = _45 * (cb2_012x);
  bool _168 = (((uint)(cb4_007x)) == 0);
  float _173 = (TEXCOORD_6.x) - (cb0_015x);
  float _174 = (TEXCOORD_6.y) - (cb0_015y);
  float _175 = (TEXCOORD_6.z) - (cb0_015z);
  float _176 = _173 * _173;
  float _177 = _174 * _174;
  float _178 = _176 + _177;
  float _179 = _175 * _175;
  float _180 = _178 + _179;
  float _181 = sqrt(_180);
  float _184 = _181 - (cb3_050x);
  float _185 = max(0.0f, _184);
  float _186 = _185 / _181;
  float _187 = _186 * _175;
  float _190 = (cb3_052z) * _187;
  float _191 = abs(_187);
  bool _192 = (_191 > 0.009999999776482582f);
  float _193 = _190 * -1.4426950216293335f;
  float _194 = exp2(_193);
  float _195 = 1.0f - _194;
  float _196 = _195 / _190;
  float _197 = (_192 ? _196 : 1.0f);
  float _200 = _197 * _185;
  float _201 = _200 * (cb3_051w);
  float _202 = min(1.0f, _201);
  float _203 = _202 * 1.4426950216293335f;
  float _204 = exp2(_203);
  float _205 = saturate(_204);
  float _206 = 1.0f - _205;
  float _208 = (cb3_052y) * _206;
  float _214 = dot(float3(_173, _174, _175), float3(_173, _174, _175));
  float _215 = rsqrt(_214);
  float _216 = _215 * _173;
  float _217 = _215 * _174;
  float _218 = _215 * _175;
  float _219 = dot(float3(_216, _217, _218), float3((cb3_054x), (cb3_054y), (cb3_054z)));
  float _220 = saturate(_219);
  float _221 = log2(_220);
  float _222 = _221 * (cb3_054w);
  float _223 = exp2(_222);
  float _229 = dot(float3(_216, _217, _218), float3((cb3_053x), (cb3_053y), (cb3_053z)));
  float _230 = saturate(_229);
  float _231 = log2(_230);
  float _232 = _231 * (cb3_053w);
  float _233 = exp2(_232);
  float _235 = 1.0f - _208;
  float _236 = (cb3_051y) * _235;
  float _239 = _185 - (cb3_052x);
  float _240 = max(0.0f, _239);
  float _241 = (cb3_051x) * 1.4426950216293335f;
  float _242 = _241 * _240;
  float _243 = exp2(_242);
  float _244 = 1.0f - _243;
  float _245 = _244 * _236;
  float _246 = _245 + _208;
  float _247 = saturate(_246);
  float _249 = _185 * -1.4426950216293335f;
  float _250 = _249 * (cb3_051z);
  float _251 = exp2(_250);
  float _252 = 1.0f - _251;
  float _261 = (cb3_058x) - (cb3_056x);
  float _262 = (cb3_058y) - (cb3_056y);
  float _263 = (cb3_058z) - (cb3_056z);
  float _264 = _261 * _223;
  float _265 = _262 * _223;
  float _266 = _263 * _223;
  float _267 = _264 + (cb3_056x);
  float _268 = _265 + (cb3_056y);
  float _269 = _266 + (cb3_056z);
  float _274 = (cb3_055x) - _267;
  float _275 = (cb3_055y) - _268;
  float _276 = (cb3_055z) - _269;
  float _277 = _274 * _233;
  float _278 = _275 * _233;
  float _279 = _276 * _233;
  float _284 = _267 - (cb3_057x);
  float _285 = _284 + _277;
  float _286 = _268 - (cb3_057y);
  float _287 = _286 + _278;
  float _288 = _269 - (cb3_057z);
  float _289 = _288 + _279;
  float _290 = _285 * _252;
  float _291 = _287 * _252;
  float _292 = _289 * _252;
  float _293 = _290 + (cb3_057x);
  float _294 = _291 + (cb3_057y);
  float _295 = _292 + (cb3_057z);
  float _299 = (cb3_055w) - _293;
  float _300 = (cb3_056w) - _294;
  float _301 = (cb3_057w) - _295;
  float _302 = _299 * _236;
  float _303 = _300 * _236;
  float _304 = _301 * _236;
  float _331;
  float _346;
  float _347;
  float _348;
  float _365;
  float _366;
  float _367;
  if (!_168) {
    float _306 = _302 + _293;
    float _307 = _303 + _294;
    float _308 = _304 + _295;
    bool _311 = ((cb2_019y) > 0.0f);
    _331 = 1.0f;
    do {
      if (_311) {
        float _315 = (cb2_015w) * (SV_Position.y);
        float _317 = (cb2_015z) * (SV_Position.x);
        uint _320 = (cb1_001x) + 0;
        float4 _322 = t1.Sample(s1[_320], float2(_317, _315));
        float _326 = (_322.x) + -1.0f;
        float _327 = (cb2_019y) * _326;
        float _328 = _327 + 1.0f;
        float _329 = saturate(_328);
        _331 = _329;
      }
      float _332 = _331 * _306;
      float _333 = _331 * _307;
      float _334 = _331 * _308;
      float _335 = _332 - _155;
      float _336 = _333 - _159;
      float _337 = _334 - _163;
      _346 = _335;
      _347 = _336;
      _348 = _337;
    } while (false);
  } else {
    float _339 = _293 - _155;
    float _340 = _339 + _302;
    float _341 = _294 - _159;
    float _342 = _341 + _303;
    float _343 = _295 - _163;
    float _344 = _343 + _304;
    _346 = _340;
    _347 = _342;
    _348 = _344;
  }
  float _349 = _348 * _247;
  float _350 = _347 * _247;
  float _351 = _346 * _247;
  float _352 = _351 + _155;
  float _353 = _350 + _159;
  float _354 = _349 + _163;
  int _357 = asint((cb2_025y));
  bool _358 = (_357 == 0);
  _365 = _352;
  _366 = _353;
  _367 = _354;
  if (!_358) {
    float4 _360 = t2.SampleLevel(s0, float3(_352, _353, _354), 0.0f);
    _365 = (_360.x);
    _366 = (_360.y);
    _367 = (_360.z);
  }
  float _368 = log2(_365);
  float _369 = log2(_366);
  float _370 = log2(_367);
  float _371 = _368 * 0.45454543828964233f;
  float _372 = _369 * 0.45454543828964233f;
  float _373 = _370 * 0.45454543828964233f;
  float _374 = exp2(_371);
  float _375 = exp2(_372);
  float _376 = exp2(_373);
  SV_Target.x = _374;
  SV_Target.y = _375;
  SV_Target.z = _376;
  SV_Target.w = _165;
  return SV_Target;
}
