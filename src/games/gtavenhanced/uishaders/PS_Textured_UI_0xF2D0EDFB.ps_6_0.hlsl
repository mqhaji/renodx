Texture2D<float4> t0 : register(t0, space1);

Texture2D<float4> t1 : register(t2);

Texture3D<float4> t2 : register(t7);

cbuffer cb0 : register(b2) {
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
};

cbuffer cb1 : register(b3) {
  uint cb1_000x : packoffset(c000.x);
  uint cb1_001x : packoffset(c001.x);
};

cbuffer cb2 : register(b5) {
  float cb2_012x : packoffset(c012.x);
  float cb2_012y : packoffset(c012.y);
  float cb2_012z : packoffset(c012.z);
  float cb2_013z : packoffset(c013.z);
  float cb2_015z : packoffset(c015.z);
  float cb2_015w : packoffset(c015.w);
  float cb2_019y : packoffset(c019.y);
  float cb2_025y : packoffset(c025.y);
};

cbuffer cb3 : register(b6) {
  float cb3_000x : packoffset(c000.x);
  float cb3_000y : packoffset(c000.y);
  float cb3_000z : packoffset(c000.z);
  float cb3_001x : packoffset(c001.x);
  float cb3_001y : packoffset(c001.y);
  float cb3_001z : packoffset(c001.z);
  float cb3_043x : packoffset(c043.x);
  float cb3_043y : packoffset(c043.y);
  float cb3_043z : packoffset(c043.z);
  float cb3_043w : packoffset(c043.w);
  float cb3_044x : packoffset(c044.x);
  float cb3_044y : packoffset(c044.y);
  float cb3_044z : packoffset(c044.z);
  float cb3_044w : packoffset(c044.w);
  float cb3_045x : packoffset(c045.x);
  float cb3_045y : packoffset(c045.y);
  float cb3_045z : packoffset(c045.z);
  float cb3_046x : packoffset(c046.x);
  float cb3_046y : packoffset(c046.y);
  float cb3_046z : packoffset(c046.z);
  float cb3_046w : packoffset(c046.w);
  float cb3_047x : packoffset(c047.x);
  float cb3_047y : packoffset(c047.y);
  float cb3_047z : packoffset(c047.z);
  float cb3_047w : packoffset(c047.w);
  float cb3_048x : packoffset(c048.x);
  float cb3_048y : packoffset(c048.y);
  float cb3_048z : packoffset(c048.z);
  float cb3_048w : packoffset(c048.w);
  float cb3_049x : packoffset(c049.x);
  float cb3_049y : packoffset(c049.y);
  float cb3_049z : packoffset(c049.z);
  float cb3_050x : packoffset(c050.x);
  float cb3_051x : packoffset(c051.x);
  float cb3_051y : packoffset(c051.y);
  float cb3_051z : packoffset(c051.z);
  float cb3_051w : packoffset(c051.w);
  float cb3_052x : packoffset(c052.x);
  float cb3_052y : packoffset(c052.y);
  float cb3_052z : packoffset(c052.z);
  float cb3_053x : packoffset(c053.x);
  float cb3_053y : packoffset(c053.y);
  float cb3_053z : packoffset(c053.z);
  float cb3_053w : packoffset(c053.w);
  float cb3_054x : packoffset(c054.x);
  float cb3_054y : packoffset(c054.y);
  float cb3_054z : packoffset(c054.z);
  float cb3_054w : packoffset(c054.w);
  float cb3_055x : packoffset(c055.x);
  float cb3_055y : packoffset(c055.y);
  float cb3_055z : packoffset(c055.z);
  float cb3_055w : packoffset(c055.w);
  float cb3_056x : packoffset(c056.x);
  float cb3_056y : packoffset(c056.y);
  float cb3_056z : packoffset(c056.z);
  float cb3_056w : packoffset(c056.w);
  float cb3_057x : packoffset(c057.x);
  float cb3_057y : packoffset(c057.y);
  float cb3_057z : packoffset(c057.z);
  float cb3_057w : packoffset(c057.w);
  float cb3_058x : packoffset(c058.x);
  float cb3_058y : packoffset(c058.y);
  float cb3_058z : packoffset(c058.z);
};

cbuffer cb4 : register(b7) {
  uint cb4_007x : packoffset(c007.x);
};

cbuffer cb5 : register(b10, space1) {
  float cb5_000x : packoffset(c000.x);
  float cb5_000y : packoffset(c000.y);
  float cb5_000z : packoffset(c000.z);
};

SamplerState s0 : register(s2, space1);

SamplerState s1[] : register(s0, space2);

float4 main(
  float4 COLOR : COLOR,
  linear float2 TEXCOORD : TEXCOORD,
  linear float3 TEXCOORD_1 : TEXCOORD1,
  linear float4 TEXCOORD_6 : TEXCOORD6,
  noperspective float4 SV_Position : SV_Position,
  linear float4 SV_ClipDistance : SV_ClipDistance
) : SV_Target {
  float4 SV_Target;
  uint _26 = (cb1_000x) + 0;
  float4 _28 = t0.Sample(s1[_26], float2((TEXCOORD.x), (TEXCOORD.y)));
  float _33 = dot(float3((TEXCOORD_1.x), (TEXCOORD_1.y), (TEXCOORD_1.z)), float3((TEXCOORD_1.x), (TEXCOORD_1.y), (TEXCOORD_1.z)));
  float _34 = rsqrt(_33);
  float _35 = _34 * (TEXCOORD_1.x);
  float _36 = _34 * (TEXCOORD_1.y);
  float _37 = _34 * (TEXCOORD_1.z);
  float _45 = (_28.w) * (COLOR.w);
  float _46 = (cb2_012z) * (COLOR.x);
  float _47 = (cb2_012y) * (COLOR.y);
  float _50 = (_28.x) * (_28.x);
  float _51 = (_28.y) * (_28.y);
  float _52 = (_28.z) * (_28.z);
  float _61 = -0.0f - (cb3_000x);
  float _62 = -0.0f - (cb3_000y);
  float _63 = -0.0f - (cb3_000z);
  float _68 = (cb0_015x) - (TEXCOORD_6.x);
  float _69 = (cb0_015y) - (TEXCOORD_6.y);
  float _70 = (cb0_015z) - (TEXCOORD_6.z);
  float _71 = dot(float3(_68, _69, _70), float3(_68, _69, _70));
  float _72 = rsqrt(_71);
  float _73 = _68 * _72;
  float _74 = _69 * _72;
  float _75 = _70 * _72;
  float _76 = _73 - (cb3_000x);
  float _77 = _74 - (cb3_000y);
  float _78 = _75 - (cb3_000z);
  float _79 = dot(float3(_76, _77, _78), float3(_76, _77, _78));
  float _80 = rsqrt(_79);
  float _81 = _76 * _80;
  float _82 = _77 * _80;
  float _83 = _78 * _80;
  float _84 = saturate((cb5_000z));
  float _85 = _46 * _46;
  float _86 = _47 * _47;
  float _87 = (cb5_000y) + -500.0f;
  float _88 = max(0.0f, _87);
  float _89 = (cb5_000y) - _88;
  float _90 = _89 * 3.0f;
  float _91 = _88 * 558.0f;
  float _92 = _90 + _91;
  float _93 = dot(float3(_35, _36, _37), float3(_61, _62, _63));
  float _94 = saturate(_93);
  float _95 = dot(float3(_73, _74, _75), float3(_35, _36, _37));
  float _96 = saturate(_95);
  float _97 = dot(float3(_81, _82, _83), float3(_61, _62, _63));
  float _98 = saturate(_97);
  float _99 = 1.0f - _96;
  float _100 = 1.0f - _98;
  float _101 = 1.0f - (cb5_000x);
  float _102 = _99 * _99;
  float _103 = _102 * _102;
  float _104 = _99 * (cb5_000x);
  float _105 = _104 * _103;
  float _106 = _100 * _100;
  float _107 = _106 * _106;
  float _108 = _100 * (cb5_000x);
  float _109 = _108 * _107;
  float _110 = _101 + _105;
  float _111 = _101 + _109;
  float _112 = _92 + 2.0f;
  float _113 = _110 * _84;
  float _114 = 1.0f - _113;
  float _115 = _92 + 9.99999993922529e-09f;
  float _116 = dot(float3(_35, _36, _37), float3(_81, _82, _83));
  float _117 = _116 + 9.99999993922529e-09f;
  float _118 = saturate(_117);
  float _119 = log2(_118);
  float _120 = _119 * _115;
  float _121 = exp2(_120);
  float _122 = _112 * 0.125f;
  float _123 = _122 * _121;
  float _124 = _123 * _111;
  float _125 = _94 * _84;
  float _126 = _125 * _124;
  float _127 = _114 * _94;
  float _128 = _127 * _50;
  float _129 = _127 * _51;
  float _130 = _127 * _52;
  float _131 = _126 + _128;
  float _132 = _126 + _129;
  float _133 = _126 + _130;
  float _134 = _131 * (cb3_001x);
  float _135 = _132 * (cb3_001y);
  float _136 = _133 * (cb3_001z);
  float _139 = (cb3_043w) + _37;
  float _142 = _139 * (cb3_044w);
  float _143 = max(0.0f, _142);
  float _148 = (cb3_047x) * _143;
  float _149 = (cb3_047y) * _143;
  float _150 = (cb3_047z) * _143;
  float _155 = _148 + (cb3_048x);
  float _156 = _149 + (cb3_048y);
  float _157 = _150 + (cb3_048z);
  float _158 = 1.0f - (cb2_013z);
  float _159 = _155 * _158;
  float _160 = _156 * _158;
  float _161 = _157 * _158;
  float _166 = (cb3_045x) * _143;
  float _167 = (cb3_045y) * _143;
  float _168 = (cb3_045z) * _143;
  float _173 = _166 + (cb3_046x);
  float _174 = _167 + (cb3_046y);
  float _175 = _168 + (cb3_046z);
  float _176 = _173 * (cb2_013z);
  float _177 = _174 * (cb2_013z);
  float _178 = _175 * (cb2_013z);
  float _179 = _176 + _159;
  float _180 = _177 + _160;
  float _181 = _178 + _161;
  float _182 = _179 * _86;
  float _183 = _180 * _86;
  float _184 = _181 * _86;
  float _188 = (cb3_043x) * _143;
  float _189 = (cb3_043y) * _143;
  float _190 = (cb3_043z) * _143;
  float _194 = _188 + (cb3_044x);
  float _195 = _189 + (cb3_044y);
  float _196 = _190 + (cb3_044z);
  float _200 = dot(float3((cb3_046w), (cb3_047w), (cb3_048w)), float3(_35, _36, _37));
  float _201 = saturate(_200);
  float _206 = (cb3_049x) * _201;
  float _207 = (cb3_049y) * _201;
  float _208 = (cb3_049z) * _201;
  float _209 = _194 + _206;
  float _210 = _195 + _207;
  float _211 = _196 + _208;
  float _212 = _209 * _85;
  float _213 = _210 * _85;
  float _214 = _211 * _85;
  float _215 = _212 + _182;
  float _216 = _213 + _183;
  float _217 = _214 + _184;
  float _218 = _114 * _50;
  float _219 = _218 * _215;
  float _220 = _114 * _51;
  float _221 = _220 * _216;
  float _222 = _114 * _52;
  float _223 = _222 * _217;
  float _224 = _219 + _134;
  float _225 = _221 + _135;
  float _226 = _223 + _136;
  float _229 = _45 * (cb2_012x);
  bool _232 = (((uint)(cb4_007x)) == 0);
  float _233 = (TEXCOORD_6.x) - (cb0_015x);
  float _234 = (TEXCOORD_6.y) - (cb0_015y);
  float _235 = (TEXCOORD_6.z) - (cb0_015z);
  float _236 = _233 * _233;
  float _237 = _234 * _234;
  float _238 = _236 + _237;
  float _239 = _235 * _235;
  float _240 = _238 + _239;
  float _241 = sqrt(_240);
  float _244 = _241 - (cb3_050x);
  float _245 = max(0.0f, _244);
  float _246 = _245 / _241;
  float _247 = _246 * _235;
  float _250 = (cb3_052z) * _247;
  float _251 = abs(_247);
  bool _252 = (_251 > 0.009999999776482582f);
  float _253 = _250 * -1.4426950216293335f;
  float _254 = exp2(_253);
  float _255 = 1.0f - _254;
  float _256 = _255 / _250;
  float _257 = (_252 ? _256 : 1.0f);
  float _260 = _257 * _245;
  float _261 = _260 * (cb3_051w);
  float _262 = min(1.0f, _261);
  float _263 = _262 * 1.4426950216293335f;
  float _264 = exp2(_263);
  float _265 = saturate(_264);
  float _266 = 1.0f - _265;
  float _268 = (cb3_052y) * _266;
  float _274 = dot(float3(_233, _234, _235), float3(_233, _234, _235));
  float _275 = rsqrt(_274);
  float _276 = _275 * _233;
  float _277 = _275 * _234;
  float _278 = _275 * _235;
  float _279 = dot(float3(_276, _277, _278), float3((cb3_054x), (cb3_054y), (cb3_054z)));
  float _280 = saturate(_279);
  float _281 = log2(_280);
  float _282 = _281 * (cb3_054w);
  float _283 = exp2(_282);
  float _289 = dot(float3(_276, _277, _278), float3((cb3_053x), (cb3_053y), (cb3_053z)));
  float _290 = saturate(_289);
  float _291 = log2(_290);
  float _292 = _291 * (cb3_053w);
  float _293 = exp2(_292);
  float _295 = 1.0f - _268;
  float _296 = (cb3_051y) * _295;
  float _299 = _245 - (cb3_052x);
  float _300 = max(0.0f, _299);
  float _301 = (cb3_051x) * 1.4426950216293335f;
  float _302 = _301 * _300;
  float _303 = exp2(_302);
  float _304 = 1.0f - _303;
  float _305 = _304 * _296;
  float _306 = _305 + _268;
  float _307 = saturate(_306);
  float _309 = _245 * -1.4426950216293335f;
  float _310 = _309 * (cb3_051z);
  float _311 = exp2(_310);
  float _312 = 1.0f - _311;
  float _321 = (cb3_058x) - (cb3_056x);
  float _322 = (cb3_058y) - (cb3_056y);
  float _323 = (cb3_058z) - (cb3_056z);
  float _324 = _321 * _283;
  float _325 = _322 * _283;
  float _326 = _323 * _283;
  float _327 = _324 + (cb3_056x);
  float _328 = _325 + (cb3_056y);
  float _329 = _326 + (cb3_056z);
  float _334 = (cb3_055x) - _327;
  float _335 = (cb3_055y) - _328;
  float _336 = (cb3_055z) - _329;
  float _337 = _334 * _293;
  float _338 = _335 * _293;
  float _339 = _336 * _293;
  float _344 = _327 - (cb3_057x);
  float _345 = _344 + _337;
  float _346 = _328 - (cb3_057y);
  float _347 = _346 + _338;
  float _348 = _329 - (cb3_057z);
  float _349 = _348 + _339;
  float _350 = _345 * _312;
  float _351 = _347 * _312;
  float _352 = _349 * _312;
  float _353 = _350 + (cb3_057x);
  float _354 = _351 + (cb3_057y);
  float _355 = _352 + (cb3_057z);
  float _359 = (cb3_055w) - _353;
  float _360 = (cb3_056w) - _354;
  float _361 = (cb3_057w) - _355;
  float _362 = _359 * _296;
  float _363 = _360 * _296;
  float _364 = _361 * _296;
  float _391;
  float _406;
  float _407;
  float _408;
  float _425;
  float _426;
  float _427;
  if (!_232) {
    float _366 = _362 + _353;
    float _367 = _363 + _354;
    float _368 = _364 + _355;
    bool _371 = ((cb2_019y) > 0.0f);
    _391 = 1.0f;
    do {
      if (_371) {
        float _375 = (cb2_015w) * (SV_Position.y);
        float _377 = (cb2_015z) * (SV_Position.x);
        uint _380 = (cb1_001x) + 0;
        float4 _382 = t1.Sample(s1[_380], float2(_377, _375));
        float _386 = (_382.x) + -1.0f;
        float _387 = (cb2_019y) * _386;
        float _388 = _387 + 1.0f;
        float _389 = saturate(_388);
        _391 = _389;
      }
      float _392 = _391 * _366;
      float _393 = _391 * _367;
      float _394 = _391 * _368;
      float _395 = _392 - _224;
      float _396 = _393 - _225;
      float _397 = _394 - _226;
      _406 = _395;
      _407 = _396;
      _408 = _397;
    } while (false);
  } else {
    float _399 = _353 - _224;
    float _400 = _399 + _362;
    float _401 = _354 - _225;
    float _402 = _401 + _363;
    float _403 = _355 - _226;
    float _404 = _403 + _364;
    _406 = _400;
    _407 = _402;
    _408 = _404;
  }
  float _409 = _408 * _307;
  float _410 = _407 * _307;
  float _411 = _406 * _307;
  float _412 = _411 + _224;
  float _413 = _410 + _225;
  float _414 = _409 + _226;
  int _417 = asint((cb2_025y));
  bool _418 = (_417 == 0);
  _425 = _412;
  _426 = _413;
  _427 = _414;
  if (!_418) {
    float4 _420 = t2.SampleLevel(s0, float3(_412, _413, _414), 0.0f);
    _425 = (_420.x);
    _426 = (_420.y);
    _427 = (_420.z);
  }
  float _428 = log2(_425);
  float _429 = log2(_426);
  float _430 = log2(_427);
  float _431 = _428 * 0.45454543828964233f;
  float _432 = _429 * 0.45454543828964233f;
  float _433 = _430 * 0.45454543828964233f;
  float _434 = exp2(_431);
  float _435 = exp2(_432);
  float _436 = exp2(_433);
  SV_Target.x = _434;
  SV_Target.y = _435;
  SV_Target.z = _436;
  SV_Target.w = _229;
  return SV_Target;
}
