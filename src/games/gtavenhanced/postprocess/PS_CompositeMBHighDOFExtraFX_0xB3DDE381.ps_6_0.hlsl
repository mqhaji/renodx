#include "../common.hlsl"

Texture2DArray<float> t0 : register(t1);

Texture2D<float> t1 : register(t11, space1);

Texture2D<float4> t2 : register(t14, space1);

Texture2D<float4> t3 : register(t15, space1);

Texture2D<float4> t4 : register(t17, space1);

Texture2D<uint2> t5 : register(t18, space1);

Texture2D<float4> t6 : register(t19, space1);

Texture2D<float4> t7 : register(t20, space1);

Texture2D<float2> t8 : register(t22, space1);

Texture2D<float4> t9 : register(t23, space1);

Texture2D<float4> t10 : register(t25, space1);

Texture2D<float4> t11 : register(t28, space1);

Texture2D<float4> t12 : register(t29, space1);

Texture2D<float4> t13 : register(t30, space1);

Texture2D<float4> t14 : register(t31, space1);

cbuffer cb0 : register(b2) {
  float cb0_015x : packoffset(c015.x);
  float cb0_015y : packoffset(c015.y);
  float cb0_015z : packoffset(c015.z);
};

cbuffer cb1 : register(b3) {
  uint cb1_000w : packoffset(c000.w);
  uint cb1_001x : packoffset(c001.x);
};

cbuffer cb2 : register(b5) {
  float cb2_014w : packoffset(c014.w);
  float cb2_015x : packoffset(c015.x);
  float cb2_015y : packoffset(c015.y);
  uint cb2_022y : packoffset(c022.y);
};

cbuffer cb3 : register(b12, space1) {
  float cb3_000z : packoffset(c000.z);
  float cb3_000w : packoffset(c000.w);
  float cb3_003x : packoffset(c003.x);
  float cb3_003y : packoffset(c003.y);
  float cb3_003z : packoffset(c003.z);
  float cb3_003w : packoffset(c003.w);
  float cb3_004x : packoffset(c004.x);
  float cb3_007y : packoffset(c007.y);
  float cb3_010x : packoffset(c010.x);
  float cb3_010y : packoffset(c010.y);
  float cb3_010z : packoffset(c010.z);
  float cb3_010w : packoffset(c010.w);
  float cb3_011x : packoffset(c011.x);
  float cb3_011y : packoffset(c011.y);
  float cb3_011z : packoffset(c011.z);
  float cb3_012x : packoffset(c012.x);
  float cb3_012y : packoffset(c012.y);
  float cb3_012z : packoffset(c012.z);
  float cb3_012w : packoffset(c012.w);
  float cb3_013x : packoffset(c013.x);
  float cb3_013y : packoffset(c013.y);
  float cb3_013z : packoffset(c013.z);
  float cb3_014x : packoffset(c014.x);
  float cb3_014y : packoffset(c014.y);
  float cb3_015x : packoffset(c015.x);
  float cb3_015y : packoffset(c015.y);
  float cb3_015z : packoffset(c015.z);
  float cb3_015w : packoffset(c015.w);
  float cb3_016x : packoffset(c016.x);
  float cb3_016z : packoffset(c016.z);
  float cb3_016w : packoffset(c016.w);
  float cb3_017x : packoffset(c017.x);
  float cb3_017y : packoffset(c017.y);
  float cb3_017z : packoffset(c017.z);
  float cb3_018x : packoffset(c018.x);
  float cb3_018y : packoffset(c018.y);
  float cb3_018z : packoffset(c018.z);
  float cb3_018w : packoffset(c018.w);
  float cb3_019x : packoffset(c019.x);
  float cb3_019y : packoffset(c019.y);
  float cb3_019z : packoffset(c019.z);
  float cb3_019w : packoffset(c019.w);
  float cb3_020x : packoffset(c020.x);
  float cb3_020y : packoffset(c020.y);
  float cb3_020z : packoffset(c020.z);
  float cb3_020w : packoffset(c020.w);
  float cb3_021x : packoffset(c021.x);
  float cb3_021y : packoffset(c021.y);
  float cb3_021z : packoffset(c021.z);
  float cb3_022x : packoffset(c022.x);
  float cb3_022y : packoffset(c022.y);
  float cb3_022z : packoffset(c022.z);
  float cb3_023x : packoffset(c023.x);
  float cb3_023y : packoffset(c023.y);
  float cb3_023z : packoffset(c023.z);
  float cb3_034x : packoffset(c034.x);
  float cb3_034y : packoffset(c034.y);
  float cb3_034z : packoffset(c034.z);
  float cb3_034w : packoffset(c034.w);
  float cb3_035x : packoffset(c035.x);
  float cb3_036w : packoffset(c036.w);
  float cb3_046x : packoffset(c046.x);
  float cb3_046y : packoffset(c046.y);
  float cb3_046z : packoffset(c046.z);
  float cb3_056x : packoffset(c056.x);
  float cb3_057x : packoffset(c057.x);
  float cb3_057y : packoffset(c057.y);
  float cb3_057z : packoffset(c057.z);
  float cb3_058x : packoffset(c058.x);
  float cb3_058y : packoffset(c058.y);
  float cb3_058z : packoffset(c058.z);
  float cb3_063x : packoffset(c063.x);
  float cb3_063y : packoffset(c063.y);
  float cb3_063z : packoffset(c063.z);
  float cb3_063w : packoffset(c063.w);
  float cb3_064x : packoffset(c064.x);
  float cb3_065x : packoffset(c065.x);
  float cb3_065y : packoffset(c065.y);
  float cb3_065z : packoffset(c065.z);
  float cb3_065w : packoffset(c065.w);
  float cb3_066x : packoffset(c066.x);
  float cb3_066y : packoffset(c066.y);
  float cb3_066z : packoffset(c066.z);
  float cb3_066w : packoffset(c066.w);
  float cb3_067x : packoffset(c067.x);
  float cb3_067y : packoffset(c067.y);
  float cb3_069x : packoffset(c069.x);
  float cb3_069y : packoffset(c069.y);
  float cb3_069z : packoffset(c069.z);
  float cb3_069w : packoffset(c069.w);
  float cb3_072x : packoffset(c072.x);
  float cb3_072y : packoffset(c072.y);
  float cb3_072z : packoffset(c072.z);
  float cb3_072w : packoffset(c072.w);
  float cb3_075z : packoffset(c075.z);
  float cb3_085x : packoffset(c085.x);
  float cb3_088x : packoffset(c088.x);
  float cb3_088y : packoffset(c088.y);
  float cb3_089x : packoffset(c089.x);
  float cb3_090x : packoffset(c090.x);
  float cb3_090y : packoffset(c090.y);
  float cb3_090z : packoffset(c090.z);
  float cb3_091x : packoffset(c091.x);
  float cb3_091y : packoffset(c091.y);
  float cb3_091z : packoffset(c091.z);
  float cb3_092x : packoffset(c092.x);
  float cb3_092y : packoffset(c092.y);
  float cb3_092z : packoffset(c092.z);
  float cb3_092w : packoffset(c092.w);
  float cb3_093x : packoffset(c093.x);
  float cb3_093y : packoffset(c093.y);
  float cb3_093z : packoffset(c093.z);
  float cb3_093w : packoffset(c093.w);
};

SamplerState s0 : register(s0, space1);

SamplerState s1 : register(s1, space1);

SamplerState s2 : register(s2, space1);

SamplerState s3 : register(s3, space1);

SamplerState s4[] : register(s0, space2);

SamplerState s5 : register(s6, space1);

SamplerState s6 : register(s8, space1);

float4 main(
    noperspective float4 SV_Position: SV_Position,
    linear float4 TEXCOORD: TEXCOORD,
    linear float TEXCOORD_1: TEXCOORD1)
    : SV_Target {
  float4 SV_Target;
  float _33 = t1.Sample(s0, float2((TEXCOORD.x), (TEXCOORD.y)));
  float _35 = 1.0f - (_33.x);
  float _39 = _35 + (cb3_000w);
  float _40 = (cb3_000z) / _39;
  float _44 = (cb3_072z) / (cb3_072w);
  float _45 = _44 * 0.20000000298023224f;
  float _46 = _45 + -0.4000000059604645f;
  float _47 = saturate(_46);
  float _48 = 1.0f - _47;
  float _49 = max(_48, 0.5f);
  float _50 = min(_49, 1.0f);
  float _56 = (cb3_072x) / (cb3_072y);
  float _57 = (TEXCOORD.x) + -0.5f;
  float _58 = (TEXCOORD.y) + -0.5f;
  float _59 = _56 * _57;
  float _60 = dot(float2(_59, _58), float2(_59, _58));
  float _61 = sqrt(_60);
  float _62 = _61 * (cb3_069y);
  float _63 = _62 + (cb3_069x);
  float _64 = _50 * _60;
  float _65 = _64 * _63;
  float _66 = _65 + 1.0f;
  float _67 = _66 * _57;
  float _68 = _66 * _58;
  float _69 = _67 + 0.5f;
  float _70 = _68 + 0.5f;
  float _74 = _69 * (cb2_015x);
  float _75 = _70 * (cb2_015y);
  float _76 = _74 + -0.5f;
  float _77 = _75 + -0.5f;
  float _78 = floor(_76);
  float _79 = floor(_77);
  float _80 = _78 + 0.5f;
  float _81 = _79 + 0.5f;
  float _82 = _74 - _80;
  float _83 = _75 - _81;
  float _84 = _82 * _82;
  float _85 = _83 * _83;
  float _86 = _84 * _82;
  float _87 = _85 * _83;
  float _88 = _86 + _82;
  float _89 = _87 + _83;
  float _90 = _88 * 0.5f;
  float _91 = _89 * 0.5f;
  float _92 = _84 - _90;
  float _93 = _85 - _91;
  float _94 = _86 * 1.5f;
  float _95 = _87 * 1.5f;
  float _96 = _84 * 2.5f;
  float _97 = _85 * 2.5f;
  float _98 = _94 - _96;
  float _99 = _95 - _97;
  float _100 = _98 + 1.0f;
  float _101 = _99 + 1.0f;
  float _102 = _84 - _82;
  float _103 = _85 - _83;
  float _104 = _82 * 0.5f;
  float _105 = _104 * _102;
  float _106 = _83 * 0.5f;
  float _107 = _106 * _103;
  float _108 = 1.0f - _105;
  float _109 = _108 - _92;
  float _110 = _109 - _100;
  float _111 = 1.0f - _107;
  float _112 = _111 - _93;
  float _113 = _112 - _101;
  float _114 = _78 + -0.5f;
  float _115 = _79 + -0.5f;
  float _116 = _110 / _109;
  float _117 = _113 / _112;
  float _118 = _116 + _80;
  float _119 = _117 + _81;
  float _120 = _78 + 2.5f;
  float _121 = _79 + 2.5f;
  float _122 = _114 / (cb2_015x);
  float _123 = _115 / (cb2_015y);
  float _124 = _118 / (cb2_015x);
  float _125 = _119 / (cb2_015y);
  float _126 = _120 / (cb2_015x);
  float _127 = _121 / (cb2_015y);
  float _128 = _109 * _93;
  float _129 = _112 * _92;
  float _130 = _109 * _112;
  float _131 = _112 * _105;
  float _132 = _109 * _107;
  float _133 = _128 + _129;
  float _134 = _133 + _130;
  float _135 = _134 + _131;
  float _136 = _135 + _132;
  uint _139 = (cb1_001x) + 0;
  float4 _141 = t3.SampleLevel(s4[_139], float2(_124, _123), 0.0f);
  float _144 = (_141.y) * _128;
  float _145 = (_141.z) * _128;
  uint _148 = (cb1_001x) + 0;
  float4 _150 = t3.SampleLevel(s4[_148], float2(_122, _125), 0.0f);
  float _153 = (_150.y) * _129;
  float _154 = (_150.z) * _129;
  float _155 = _153 + _144;
  float _156 = _154 + _145;
  uint _159 = (cb1_001x) + 0;
  float4 _161 = t3.SampleLevel(s4[_159], float2(_124, _125), 0.0f);
  float _164 = (_161.y) * _130;
  float _165 = (_161.z) * _130;
  float _166 = _155 + _164;
  float _167 = _156 + _165;
  uint _170 = (cb1_001x) + 0;
  float4 _172 = t3.SampleLevel(s4[_170], float2(_126, _125), 0.0f);
  float _175 = (_172.y) * _131;
  float _176 = (_172.z) * _131;
  float _177 = _166 + _175;
  float _178 = _167 + _176;
  uint _181 = (cb1_001x) + 0;
  float4 _183 = t3.SampleLevel(s4[_181], float2(_124, _127), 0.0f);
  float _186 = (_183.y) * _132;
  float _187 = (_183.z) * _132;
  float _188 = _177 + _186;
  float _189 = _178 + _187;
  float _190 = _188 / _136;
  float _191 = _189 / _136;
  float _192 = max(0.0f, _190);
  float _193 = max(0.0f, _191);
  float _200 = (cb3_072x) / (cb3_072y);
  float _201 = _200 * _67;
  float _202 = dot(float2(_201, _68), float2(_201, _68));
  float _203 = sqrt(_202);
  float _204 = _203 * (cb3_069w);
  float _205 = _204 + (cb3_069z);
  float _206 = _50 * _202;
  float _207 = _206 * _205;
  float _208 = _207 + 1.0f;
  float _209 = _208 * _67;
  float _210 = _208 * _68;
  float _211 = _209 + 0.5f;
  float _212 = _210 + 0.5f;
  uint _215 = (cb1_000w) + 0;
  float4 _217 = t3.Sample(s4[_215], float2(_211, _212));
  float _221 = (cb2_014w) * (_217.x);
  bool _224 = ((cb3_085x) > 0.0f);
  float _369 = _221;
  float _370 = _192;
  float _371 = _193;
  float _481;
  float _482;
  float _483;
  float _484;
  int _485;
  float _533;
  float _534;
  float _535;
  float _536;
  float _622;
  float _623;
  float _624;
  float _625;
  int _626;
  float _745;
  float _746;
  float _747;
  float _748;
  float _756;
  float _757;
  float _758;
  float _759;
  float _856;
  float _857;
  float _858;
  float _859;
  int _860;
  float _981;
  float _982;
  float _983;
  float _984;
  float _992;
  float _993;
  float _994;
  float _995;
  float _1016;
  float _1017;
  float _1018;
  float _1065;
  float _1066;
  float _1067;
  float _1459;
  float _1460;
  float _1461;
  if (!_224) {
    float _229 = (cb3_072y) * 0.5f;
    float _230 = _69 - (cb3_072x);
    float _231 = _70 - _229;
    float4 _232 = t2.Sample(s2, float2(_230, _231));
    float _236 = (cb3_072x) * 0.5f;
    float _237 = _236 + _69;
    float _238 = _70 - (cb3_072y);
    float4 _239 = t2.Sample(s2, float2(_237, _238));
    float _243 = _69 - _236;
    float _244 = (cb3_072y) + _70;
    float4 _245 = t2.Sample(s2, float2(_243, _244));
    float _249 = (cb3_072x) + _69;
    float _250 = _229 + _70;
    float4 _251 = t2.Sample(s2, float2(_249, _250));
    float4 _255 = t2.Sample(s2, float2(_69, _70));
    float4 _259 = t6.Sample(s1, float2(_230, _231));
    float4 _263 = t6.Sample(s1, float2(_237, _238));
    float4 _267 = t6.Sample(s1, float2(_243, _244));
    float4 _271 = t6.Sample(s1, float2(_249, _250));
    float4 _275 = t6.Sample(s1, float2(_69, _70));
    float _279 = (_275.x) + (_255.x);
    float _280 = _279 * 0.5f;
    float _281 = (_275.y) + (_255.y);
    float _282 = _281 * 0.5f;
    float _283 = (_275.z) + (_255.z);
    float _284 = _283 * 0.5f;
    float _285 = (_239.x) + (_232.x);
    float _286 = _285 + (_245.x);
    float _287 = _286 + (_251.x);
    float _288 = _287 + (_259.x);
    float _289 = _288 + (_263.x);
    float _290 = _289 + (_267.x);
    float _291 = _290 + (_271.x);
    float _292 = _291 + _280;
    float _293 = _292 * 0.1111111119389534f;
    float _294 = (_239.y) + (_232.y);
    float _295 = _294 + (_245.y);
    float _296 = _295 + (_251.y);
    float _297 = _296 + (_259.y);
    float _298 = _297 + (_263.y);
    float _299 = _298 + (_267.y);
    float _300 = _299 + (_271.y);
    float _301 = _300 + _282;
    float _302 = _301 * 0.1111111119389534f;
    float _303 = (_239.z) + (_232.z);
    float _304 = _303 + (_245.z);
    float _305 = _304 + (_251.z);
    float _306 = _305 + (_259.z);
    float _307 = _306 + (_263.z);
    float _308 = _307 + (_267.z);
    float _309 = _308 + (_271.z);
    float _310 = _309 + _284;
    float _311 = _310 * 0.1111111119389534f;
    bool _314 = !((cb3_004x) == 0.0f);
    float _315 = (_314 ? (_275.x) : _280);
    float _316 = (_314 ? (_275.y) : _282);
    float _317 = (_314 ? (_275.z) : _284);
    float _318 = (_314 ? (_275.x) : _293);
    float _319 = (_314 ? (_275.y) : _302);
    float _320 = (_314 ? (_275.z) : _311);
    float _324 = _40 - (cb3_003x);
    float _325 = _324 * (cb3_003y);
    float _326 = 1.0f - _325;
    float _327 = saturate(_326);
    float _330 = _40 - (cb3_003z);
    float _331 = _330 * (cb3_003w);
    float _332 = saturate(_331);
    float _333 = max(_327, _332);
    float _334 = _333 * 2.0040080547332764f;
    float _335 = _333 * 999.9999389648438f;
    float _336 = 1.0f - _334;
    float _337 = 2.0020039081573486f - _334;
    float _338 = 999.9999389648438f - _335;
    float _339 = saturate(_336);
    float _340 = saturate(_337);
    float _341 = saturate(_338);
    float _342 = 1.0f - _339;
    float _343 = min(_340, _342);
    float _344 = _342 - _343;
    float _345 = min(_341, _344);
    float _346 = _344 - _345;
    float _347 = _339 * _221;
    float _348 = _339 * _192;
    float _349 = _339 * _193;
    float _350 = _343 * (_275.x);
    float _351 = _343 * (_275.y);
    float _352 = _343 * (_275.z);
    float _353 = _350 + _347;
    float _354 = _351 + _348;
    float _355 = _352 + _349;
    float _356 = _345 * _315;
    float _357 = _345 * _316;
    float _358 = _345 * _317;
    float _359 = _353 + _356;
    float _360 = _354 + _357;
    float _361 = _355 + _358;
    float _362 = _346 * _318;
    float _363 = _346 * _319;
    float _364 = _346 * _320;
    float _365 = _359 + _362;
    float _366 = _360 + _363;
    float _367 = _361 + _364;
    _369 = _365;
    _370 = _366;
    _371 = _367;
  }
  int _374 = int(374);
  bool _375 = (_374 == 1);
  if (_375) {
    float _382 = (cb2_015x)*_69;
    float _383 = (cb2_015y)*_70;
    int _384 = int(384);
    int _385 = int(385);
    uint2 _386 = t5.Load(int3(_384, _385, 0));
    float _388 = float((uint)((int)(_386.y)));
    float _389 = _388 * 0.003921568859368563f;
    bool _392 = (_389 > (cb3_056x));
    float _393 = (_392 ? 0.0f : 1.0f);
    float _394 = _69 * 2.0f;
    float _395 = _70 * 2.0f;
    float _396 = _394 + -1.0f;
    float _397 = 1.0f - _395;
    float _402 = dot(float3(_396, _397, 1.0f), float3((cb3_021x), (cb3_021y), (cb3_021z)));
    float _407 = dot(float3(_396, _397, 1.0f), float3((cb3_022x), (cb3_022y), (cb3_022z)));
    float _412 = dot(float3(_396, _397, 1.0f), float3((cb3_023x), (cb3_023y), (cb3_023z)));
    float _417 = _402 * _40;
    float _418 = _407 * _40;
    float _419 = _412 * _40;
    float _420 = (cb0_015x) + _417;
    float _421 = (cb0_015y) + _418;
    float _422 = (cb0_015z) + _419;
    float _428 = dot(float4(_420, _421, _422, 1.0f), float4((cb3_018x), (cb3_018y), (cb3_018z), (cb3_018w)));
    float _434 = dot(float4(_420, _421, _422, 1.0f), float4((cb3_019x), (cb3_019y), (cb3_019z), (cb3_019w)));
    float _440 = dot(float4(_420, _421, _422, 1.0f), float4((cb3_020x), (cb3_020y), (cb3_020z), (cb3_020w)));
    bool _441 = (_440 == 0.0f);
    float _442 = (_441 ? 9.999999747378752e-06f : _440);
    float _443 = _428 / _442;
    float _444 = _434 / _442;
    float _445 = _396 - _443;
    float _446 = _397 - _444;
    float _447 = _445 * 40.0f;
    float _448 = _446 * -22.5f;
    float _449 = dot(float2(_447, _448), float2(_447, _448));
    bool _450 = (_449 > 1.0f);
    float _451 = rsqrt(_449);
    float _452 = _451 * _447;
    float _453 = _448 * _451;
    float _454 = (_450 ? _452 : _447);
    float _455 = (_450 ? _453 : _448);
    float _456 = (cb3_016x) * 0.012500000186264515f;
    float _457 = _456 * _454;
    float _458 = (cb3_016x) * 0.02222222276031971f;
    float _459 = _458 * _455;
    float _460 = _393 * _369;
    float _461 = _393 * _370;
    float _462 = _393 * _371;
    float _464 = _457 * (cb3_017y);
    float _465 = _459 * (cb3_017y);
    float _466 = _69 * 58.16400146484375f;
    float _467 = _70 * 47.130001068115234f;
    float _468 = _369 * 8.0f;
    float _469 = _370 * 8.0f;
    float _470 = _468 + _466;
    float _471 = _469 + _467;
    float4 _472 = t11.Sample(s5, float2(_470, _471));
    float _474 = (_472.x) + -0.5f;
    float _475 = _474 * 0.5f;
    int _477 = int(477);
    bool _478 = (_477 > 1);
    _533 = _460;
    _534 = _461;
    _535 = _462;
    _536 = _393;
    do {
      if (_478) {
        _481 = _460;
        _482 = _461;
        _483 = _462;
        _484 = _393;
        _485 = 1;
        while (true) {
          float _486 = float(_485);
          float _487 = _486 + _475;
          float _488 = _464 * _487;
          float _489 = _488 + _69;
          float _490 = _465 * _487;
          float _491 = _490 + _70;
          float _495 = _489 * (cb2_015x);
          float _496 = _491 * (cb2_015y);
          float _497 = round(_495);
          float _498 = round(_496);
          float _499 = _497 + 0.5f;
          float _500 = _498 + 0.5f;
          float _501 = _499 / (cb2_015x);
          float _502 = _500 / (cb2_015y);
          float _503 = (cb2_015x)*_501;
          float _504 = (cb2_015y)*_502;
          int _505 = int(505);
          int _506 = int(506);
          uint2 _507 = t5.Load(int3(_505, _506, 0));
          float _509 = float((uint)((int)(_507.y)));
          float _510 = _509 * 0.003921568859368563f;
          bool _513 = (_510 > (cb3_056x));
          float _514 = (_513 ? 0.0f : 1.0f);
          float4 _515 = t6.SampleLevel(s1, float2(_501, _502), 0.0f);
          float _519 = (_515.x) * _514;
          float _520 = (_515.y) * _514;
          float _521 = (_515.z) * _514;
          float _522 = _519 + _481;
          float _523 = _520 + _482;
          float _524 = _521 + _483;
          float _525 = _514 + _484;
          int _526 = _485 + 1;
          int _529 = int(529);
          bool _530 = (_526 < _529);
          _481 = _522;
          _482 = _523;
          _483 = _524;
          _484 = _525;
          _485 = _526;
          do {
            if (_530) {
              continue;
            }
            _533 = _522;
            _534 = _523;
            _535 = _524;
            _536 = _525;
          } while (false);
          break;
        }
      }
      float _537 = max(_536, 0.10000000149011612f);
      float _538 = _533 / _537;
      float _539 = _534 / _537;
      float _540 = _535 / _537;
      float _541 = dot(float2(_457, _459), float2(_457, _459));
      float _542 = _541 * 1e+05f;
      float _543 = saturate(_542);
      float _544 = _543 * _393;
      float _545 = _538 - _369;
      float _546 = _539 - _370;
      float _547 = _540 - _371;
      float _548 = _544 * _545;
      float _549 = _544 * _546;
      float _550 = _544 * _547;
      float _551 = _548 + _369;
      float _552 = _549 + _370;
      float _553 = _550 + _371;
      _1016 = _551;
      _1017 = _552;
      _1018 = _553;
    } while (false);
  } else {
    bool _555 = (_374 == 2);
    if (_555) {
      float _560 = (cb3_088x)*_69;
      float _561 = (cb3_088y)*_70;
      float4 _562 = t9.SampleLevel(s0, float2(_560, _561), 0.0f);
      bool _565 = ((_562.z) >= 1.0f);
      bool _566 = ((_562.w) < 2.0f);
      bool _567 = _565 && _566;
      _756 = 0.0f;
      _757 = 0.0f;
      _758 = 0.0f;
      _759 = 0.0f;
      do {
        [branch]
        if (_567) {
          float2 _571 = t8.SampleLevel(s0, float2(_69, _70), 0.0f);
          float _576 = (cb3_016x) * (_571.x);
          float _577 = (cb3_016x) * (_571.y);
          float _578 = _576 * _576;
          float _579 = _577 * _577;
          float _580 = _578 + _579;
          float _581 = sqrt(_580);
          float _583 = min(_581, (cb3_016z));
          float _584 = (_562.x) / (_562.z);
          float _585 = (_562.y) / (_562.z);
          float _586 = min((_562.z), 2.0f);
          float _587 = _586 * _584;
          float _588 = _586 * _585;
          float _589 = _586 + 1.0f;
          float _590 = min(2.0f, _589);
          int _591 = int(591);
          float _595 = (cb3_072x)*_587;
          float _596 = (cb3_072y)*_588;
          float _597 = float(_591);
          float _598 = _597 + -0.5f;
          float _599 = _598 / _586;
          uint _600 = uint((SV_Position.x));
          uint _601 = uint((SV_Position.y));
          int _602 = _600 & 1;
          int _603 = _601 & 1;
          float _604 = float((uint)_602);
          float _605 = float((uint)_603);
          float _606 = _604 * 2.0f;
          float _607 = _606 + -1.0f;
          float _608 = _605 * 2.0f;
          float _609 = _608 + -1.0f;
          float _610 = _609 * _607;
          float _612 = _610 * (cb3_016w);
          float _613 = _586 + -2.0f;
          float _614 = _613 * 0.5f;
          float _615 = saturate(_614);
          float _616 = _612 * _615;
          float _617 = _616 + 0.5f;
          float _618 = 0.5f - _616;
          bool _619 = (_591 > 0);
          _745 = 0.0f;
          _746 = 0.0f;
          _747 = 0.0f;
          _748 = 0.0f;
          do {
            if (_619) {
              _622 = 0.0f;
              _623 = 0.0f;
              _624 = 0.0f;
              _625 = 0.0f;
              _626 = 0;
              while (true) {
                float _627 = float(_626);
                float _628 = _617 + _627;
                float _629 = _628 / _598;
                float _630 = _595 * _629;
                float _631 = _596 * _629;
                float _632 = _630 + _69;
                float _633 = _631 + _70;
                float2 _634 = t8.SampleLevel(s0, float2(_632, _633), 0.0f);
                float _639 = (cb3_016x) * (_634.x);
                float _640 = (cb3_016x) * (_634.y);
                float _641 = _639 * _639;
                float _642 = _640 * _640;
                float _643 = _641 + _642;
                float _644 = sqrt(_643);
                float _646 = min(_644, (cb3_016z));
                float _647 = t1.SampleLevel(s0, float2(_632, _633), 0.0f);
                float _652 = 1.0f - (_647.x);
                float _653 = _652 + (cb3_000w);
                float _654 = (cb3_000z) / _653;
                float _655 = 1.0f - _646;
                float _656 = _655 * 8.0f;
                float _657 = saturate(_656);
                float _658 = 1.0f - _657;
                float _659 = _646 * _599;
                float _660 = _599 * _583;
                float _661 = _654 - _40;
                float _662 = _661 + 0.5f;
                float _663 = 0.5f - _661;
                float _664 = saturate(_662);
                float _665 = saturate(_663);
                float _666 = _628 + -1.0f;
                float _667 = max(_666, 0.0f);
                float _668 = _660 - _667;
                float _669 = _659 - _667;
                float _670 = saturate(_668);
                float _671 = saturate(_669);
                float _672 = dot(float2(_664, _665), float2(_670, _671));
                float _673 = _672 * _658;
                float4 _674 = t6.SampleLevel(s1, float2(_632, _633), 0.0f);
                float _678 = _627 + _618;
                float _679 = _678 / _598;
                float _680 = _595 * _679;
                float _681 = _596 * _679;
                float _682 = _69 - _680;
                float _683 = _70 - _681;
                float2 _684 = t8.SampleLevel(s0, float2(_682, _683), 0.0f);
                float _687 = (cb3_016x) * (_684.x);
                float _688 = (cb3_016x) * (_684.y);
                float _689 = _687 * _687;
                float _690 = _688 * _688;
                float _691 = _689 + _690;
                float _692 = sqrt(_691);
                float _693 = min(_692, (cb3_016z));
                float _694 = t1.SampleLevel(s0, float2(_682, _683), 0.0f);
                float _696 = 1.0f - (_694.x);
                float _697 = _696 + (cb3_000w);
                float _698 = (cb3_000z) / _697;
                float _699 = 1.0f - _693;
                float _700 = _699 * 8.0f;
                float _701 = saturate(_700);
                float _702 = 1.0f - _701;
                float _703 = _693 * _599;
                float _704 = _698 - _40;
                float _705 = _704 + 0.5f;
                float _706 = 0.5f - _704;
                float _707 = saturate(_705);
                float _708 = saturate(_706);
                float _709 = _678 + -1.0f;
                float _710 = max(_709, 0.0f);
                float _711 = _660 - _710;
                float _712 = _703 - _710;
                float _713 = saturate(_711);
                float _714 = saturate(_712);
                float _715 = dot(float2(_707, _708), float2(_713, _714));
                float _716 = _715 * _702;
                float4 _717 = t6.SampleLevel(s1, float2(_682, _683), 0.0f);
                bool _721 = (_654 > _698);
                bool _722 = (_693 > _646);
                bool _723 = _722 && _721;
                float _724 = (_723 ? _716 : _673);
                bool _725 = _722 || _721;
                float _726 = (_725 ? _716 : _724);
                float _727 = (_717.x) * _726;
                float _728 = (_717.y) * _726;
                float _729 = (_717.z) * _726;
                float _730 = _724 * (_674.x);
                float _731 = _724 * (_674.y);
                float _732 = _724 * (_674.z);
                float _733 = _730 + _622;
                float _734 = _733 + _727;
                float _735 = _731 + _623;
                float _736 = _735 + _728;
                float _737 = _732 + _624;
                float _738 = _737 + _729;
                float _739 = _724 + _625;
                float _740 = _739 + _726;
                int _741 = _626 + 1;
                bool _742 = (_741 == _591);
                _622 = _734;
                _623 = _736;
                _624 = _738;
                _625 = _740;
                _626 = _741;
                do {
                  if (!_742) {
                    continue;
                  }
                  _745 = _734;
                  _746 = _736;
                  _747 = _738;
                  _748 = _740;
                } while (false);
                break;
              }
            }
            int _749 = _591 << 1;
            float _750 = float(_749);
            float _751 = _745 / _750;
            float _752 = _746 / _750;
            float _753 = _747 / _750;
            float _754 = _748 / _750;
            _756 = _751;
            _757 = _752;
            _758 = _753;
            _759 = _754;
          } while (false);
        }
        float _760 = 1.0f - _759;
        float _761 = _760 * _369;
        float _762 = _760 * _370;
        float _763 = _760 * _371;
        float _764 = _761 + _756;
        float _765 = _762 + _757;
        float _766 = _763 + _758;
        float4 _767 = t7.SampleLevel(s1, float2(_69, _70), 0.0f);
        float _772 = 1.0f - (_767.w);
        float _773 = _772 * _764;
        float _774 = _772 * _765;
        float _775 = _772 * _766;
        float _776 = _773 + (_767.x);
        float _777 = _774 + (_767.y);
        float _778 = _775 + (_767.z);
        _1016 = _776;
        _1017 = _777;
        _1018 = _778;
      } while (false);
    } else {
      bool _780 = (_374 == 3);
      _1016 = _369;
      _1017 = _370;
      _1018 = _371;
      if (_780) {
        float _785 = (cb3_088x)*_69;
        float _786 = (cb3_088y)*_70;
        float4 _787 = t9.SampleLevel(s0, float2(_785, _786), 0.0f);
        bool _790 = ((_787.z) >= 1.0f);
        bool _791 = ((_787.w) < 2.0f);
        bool _792 = _790 && _791;
        _992 = 0.0f;
        _993 = 0.0f;
        _994 = 0.0f;
        _995 = 0.0f;
        do {
          [branch]
          if (_792) {
            float2 _796 = t8.SampleLevel(s0, float2(_69, _70), 0.0f);
            float _802 = (cb2_015x)*_69;
            float _803 = (cb2_015y)*_70;
            int _804 = int(804);
            int _805 = int(805);
            float4 _806 = t6.Load(int3(_804, _805, 0));
            float _810 = (cb3_016x) * (_796.x);
            float _811 = (cb3_016x) * (_796.y);
            float _812 = _810 * _810;
            float _813 = _811 * _811;
            float _814 = _812 + _813;
            float _815 = sqrt(_814);
            float _817 = min(_815, (cb3_016z));
            float _818 = (_787.x) / (_787.z);
            float _819 = (_787.y) / (_787.z);
            float _820 = min((_787.z), 2.0f);
            float _821 = _820 * _818;
            float _822 = _820 * _819;
            float _823 = _820 + 1.0f;
            float _824 = min(2.0f, _823);
            int _825 = int(825);
            float _829 = (cb3_072x)*_821;
            float _830 = (cb3_072y)*_822;
            float _831 = float(_825);
            float _832 = _831 + -0.5f;
            float _833 = _832 / _820;
            uint _834 = uint((SV_Position.x));
            uint _835 = uint((SV_Position.y));
            int _836 = _834 & 1;
            int _837 = _835 & 1;
            float _838 = float((uint)_836);
            float _839 = float((uint)_837);
            float _840 = _838 * 2.0f;
            float _841 = _840 + -1.0f;
            float _842 = _839 * 2.0f;
            float _843 = _842 + -1.0f;
            float _844 = _843 * _841;
            float _846 = _844 * (cb3_016w);
            float _847 = _820 + -2.0f;
            float _848 = _847 * 0.5f;
            float _849 = saturate(_848);
            float _850 = _846 * _849;
            float _851 = _850 + 0.5f;
            float _852 = 0.5f - _850;
            bool _853 = (_825 > 0);
            _981 = 0.0f;
            _982 = 0.0f;
            _983 = 0.0f;
            _984 = 0.0f;
            do {
              if (_853) {
                _856 = 0.0f;
                _857 = 0.0f;
                _858 = 0.0f;
                _859 = 0.0f;
                _860 = 0;
                while (true) {
                  float _861 = float(_860);
                  float _862 = _851 + _861;
                  float _863 = _862 / _832;
                  float _864 = _829 * _863;
                  float _865 = _830 * _863;
                  float _866 = _864 + _69;
                  float _867 = _865 + _70;
                  float2 _868 = t8.SampleLevel(s0, float2(_866, _867), 0.0f);
                  float _873 = (cb3_016x) * (_868.x);
                  float _874 = (cb3_016x) * (_868.y);
                  float _875 = _873 * _873;
                  float _876 = _874 * _874;
                  float _877 = _875 + _876;
                  float _878 = sqrt(_877);
                  float _880 = min(_878, (cb3_016z));
                  float _884 = (cb2_015x)*_866;
                  float _885 = (cb2_015y)*_867;
                  int _886 = int(886);
                  int _887 = int(887);
                  float4 _888 = t6.Load(int3(_886, _887, 0));
                  float _890 = 1.0f - _880;
                  float _891 = _890 * 8.0f;
                  float _892 = saturate(_891);
                  float _893 = 1.0f - _892;
                  float _894 = _880 * _833;
                  float _895 = _833 * _817;
                  float _896 = (_888.w) - (_806.w);
                  float _897 = _896 + 0.5f;
                  float _898 = 0.5f - _896;
                  float _899 = saturate(_897);
                  float _900 = saturate(_898);
                  float _901 = _862 + -1.0f;
                  float _902 = max(_901, 0.0f);
                  float _903 = _895 - _902;
                  float _904 = _894 - _902;
                  float _905 = saturate(_903);
                  float _906 = saturate(_904);
                  float _907 = dot(float2(_899, _900), float2(_905, _906));
                  float _908 = _907 * _893;
                  float4 _909 = t6.SampleLevel(s1, float2(_866, _867), 0.0f);
                  float _913 = _861 + _852;
                  float _914 = _913 / _832;
                  float _915 = _829 * _914;
                  float _916 = _830 * _914;
                  float _917 = _69 - _915;
                  float _918 = _70 - _916;
                  float2 _919 = t8.SampleLevel(s0, float2(_917, _918), 0.0f);
                  float _922 = (cb3_016x) * (_919.x);
                  float _923 = (cb3_016x) * (_919.y);
                  float _924 = _922 * _922;
                  float _925 = _923 * _923;
                  float _926 = _924 + _925;
                  float _927 = sqrt(_926);
                  float _928 = min(_927, (cb3_016z));
                  float _929 = (cb2_015x)*_917;
                  float _930 = (cb2_015y)*_918;
                  int _931 = int(931);
                  int _932 = int(932);
                  float4 _933 = t6.Load(int3(_931, _932, 0));
                  float _935 = 1.0f - _928;
                  float _936 = _935 * 8.0f;
                  float _937 = saturate(_936);
                  float _938 = 1.0f - _937;
                  float _939 = _928 * _833;
                  float _940 = (_933.w) - (_806.w);
                  float _941 = _940 + 0.5f;
                  float _942 = 0.5f - _940;
                  float _943 = saturate(_941);
                  float _944 = saturate(_942);
                  float _945 = _913 + -1.0f;
                  float _946 = max(_945, 0.0f);
                  float _947 = _895 - _946;
                  float _948 = _939 - _946;
                  float _949 = saturate(_947);
                  float _950 = saturate(_948);
                  float _951 = dot(float2(_943, _944), float2(_949, _950));
                  float _952 = _951 * _938;
                  float4 _953 = t6.SampleLevel(s1, float2(_917, _918), 0.0f);
                  bool _957 = ((_888.w) > (_933.w));
                  bool _958 = (_928 > _880);
                  bool _959 = _958 && _957;
                  float _960 = (_959 ? _952 : _908);
                  bool _961 = _958 || _957;
                  float _962 = (_961 ? _952 : _960);
                  float _963 = (_953.x) * _962;
                  float _964 = (_953.y) * _962;
                  float _965 = (_953.z) * _962;
                  float _966 = _960 * (_909.x);
                  float _967 = _960 * (_909.y);
                  float _968 = _960 * (_909.z);
                  float _969 = _966 + _856;
                  float _970 = _969 + _963;
                  float _971 = _967 + _857;
                  float _972 = _971 + _964;
                  float _973 = _968 + _858;
                  float _974 = _973 + _965;
                  float _975 = _960 + _859;
                  float _976 = _975 + _962;
                  int _977 = _860 + 1;
                  bool _978 = (_977 == _825);
                  _856 = _970;
                  _857 = _972;
                  _858 = _974;
                  _859 = _976;
                  _860 = _977;
                  do {
                    if (!_978) {
                      continue;
                    }
                    _981 = _970;
                    _982 = _972;
                    _983 = _974;
                    _984 = _976;
                  } while (false);
                  break;
                }
              }
              int _985 = _825 << 1;
              float _986 = float(_985);
              float _987 = _981 / _986;
              float _988 = _982 / _986;
              float _989 = _983 / _986;
              float _990 = _984 / _986;
              _992 = _987;
              _993 = _988;
              _994 = _989;
              _995 = _990;
            } while (false);
          }
          float _996 = 1.0f - _995;
          float _997 = _996 * _369;
          float _998 = _996 * _370;
          float _999 = _996 * _371;
          float _1000 = _997 + _992;
          float _1001 = _998 + _993;
          float _1002 = _999 + _994;
          float4 _1003 = t7.SampleLevel(s1, float2(_69, _70), 0.0f);
          float _1008 = 1.0f - (_1003.w);
          float _1009 = _1008 * _1000;
          float _1010 = _1008 * _1001;
          float _1011 = _1008 * _1002;
          float _1012 = _1009 + (_1003.x);
          float _1013 = _1010 + (_1003.y);
          float _1014 = _1011 + (_1003.z);
          _1016 = _1012;
          _1017 = _1013;
          _1018 = _1014;
        } while (false);
      }
    }
  }
  float4 _1019 = t13.Sample(s2, float2((TEXCOORD.x), (TEXCOORD.y)));  // Scene
  float _1025 = (_1019.x) - _1016;
  float _1026 = (_1019.y) - _1017;
  float _1027 = (_1019.z) - _1018;
  float _1028 = (cb3_064x)*_1025;
  float _1029 = (cb3_064x)*_1026;
  float _1030 = (cb3_064x)*_1027;
  float _1031 = _1028 + _1016;
  float _1032 = _1029 + _1017;
  float _1033 = _1030 + _1018;
  bool _1036 = ((cb3_007y) < 0.0f);
  float _1037 = (_1036 ? 1.0f : (TEXCOORD.w));
  float4 _1038 = t10.Sample(s2, float2(_69, _70));
  float _1042 = (_1038.x) * _1037;
  float _1043 = (_1038.y) * _1037;
  float _1044 = (_1038.z) * _1037;
  bool _1047 = ((cb3_075z) > 0.0f);
  _1065 = _1031;
  _1066 = _1032;
  _1067 = _1033;
  if (_1047) {
    float4 _1049 = t14.Sample(s2, float2(_69, _70));
    float _1051 = (_1049.x) * (_1049.x);
    float _1052 = _1051 * _1051;
    float _1053 = _1052 * _1052;
    float _1058 = _1053 * (cb3_046x);
    float _1059 = _1053 * (cb3_046y);
    float _1060 = _1053 * (cb3_046z);
    float _1061 = _1058 + _1031;
    float _1062 = _1059 + _1032;
    float _1063 = _1060 + _1033;
    _1065 = _1061;
    _1066 = _1062;
    _1067 = _1063;
  }
  float4 _1068 = t12.Sample(s3, float2((TEXCOORD.x), (TEXCOORD.y)));
  float _1074 = (TEXCOORD.z) - (cb3_034x);
  float _1076 = _1074 * (cb3_034y);
  float _1077 = saturate(_1076);
  float _1080 = (cb3_034w) - (cb3_034z);
  float _1081 = _1080 * _1077;
  float _1084 = (cb3_034z) + -1.0f;
  float _1085 = _1084 + _1081;
  float _1086 = _1085 * (cb3_035x);
  float _1087 = _1086 + 1.0f;
  float _1090 = _1087 * (cb3_036w);
  float _1091 = _1090 * (_1068.x);
  float _1092 = _1090 * (_1068.y);
  float _1093 = _1090 * (_1068.z);
  float _1094 = _1091 + _1065;
  float _1095 = _1092 + _1066;
  float _1096 = _1093 + _1067;
  float _1099 = _1042 * 0.25f;
  float _1100 = _1099 * (cb3_007y);
  float _1101 = _1043 * 0.25f;
  float _1102 = _1101 * (cb3_007y);
  float _1103 = _1044 * 0.25f;
  float _1104 = _1103 * (cb3_007y);
  float _1105 = abs((cb3_007y));
  float _1108 = (cb2_014w)*_1042;
  float _1109 = (cb2_014w)*_1043;
  float _1110 = (cb2_014w)*_1044;
  float _1111 = _1108 - _1094;
  float _1112 = _1109 - _1095;
  float _1113 = _1110 - _1096;
  float _1114 = _1111 * _1105;
  float _1115 = _1112 * _1105;
  float _1116 = _1113 * _1105;
  float _1117 = (_1036 ? _1114 : _1100);
  float _1118 = _1094 + _1117;
  float _1119 = (_1036 ? _1115 : _1102);
  float _1120 = _1095 + _1119;
  float _1121 = (_1036 ? _1116 : _1104);
  float _1122 = _1096 + _1121;
  float _1127 = (TEXCOORD.x) + -0.5f;
  float _1128 = (TEXCOORD.y) + -0.5f;
  float _1129 = dot(float2(_1127, _1128), float2(_1127, _1128));
  float _1130 = 1.0f - _1129;
  float _1131 = log2(_1130);
  float _1132 = _1131 * (cb3_057y);
  float _1133 = exp2(_1132);
  float _1134 = _1133 + (cb3_057x);
  float _1135 = saturate(_1134);
  float _1136 = _1135 * (cb3_057z);
  float _1137 = saturate(_1136);
  float _1142 = 1.0f - (cb3_058x);
  float _1143 = 1.0f - (cb3_058y);
  float _1144 = 1.0f - (cb3_058z);
  float _1145 = _1142 * _1137;
  float _1146 = _1143 * _1137;
  float _1147 = _1144 * _1137;
  float _1148 = _1145 + (cb3_058x);
  float _1149 = _1146 + (cb3_058y);
  float _1150 = _1147 + (cb3_058z);
  float _1151 = _1148 * _1118;
  float _1152 = _1149 * _1120;
  float _1153 = _1150 * _1122;
  float _1154 = min(_1151, 65504.0f);
  float _1155 = min(_1152, 65504.0f);
  float _1156 = min(_1153, 65504.0f);
  float _1159 = (cb3_014x) * (TEXCOORD_1);
  float _1161 = _1159 + (cb3_014y);
  float _1162 = saturate(_1161);
  float _1173 = (cb3_012x) - (cb3_010x);
  float _1174 = (cb3_012y) - (cb3_010y);
  float _1175 = (cb3_012z) - (cb3_010z);
  float _1176 = (cb3_012w) - (cb3_010w);
  float _1177 = _1173 * _1162;
  float _1178 = _1174 * _1162;
  float _1179 = _1175 * _1162;
  float _1180 = _1176 * _1162;
  float _1181 = _1177 + (cb3_010x);
  float _1182 = _1178 + (cb3_010y);
  float _1183 = _1179 + (cb3_010z);
  float _1184 = _1180 + (cb3_010w);
  float _1193 = (cb3_013x) - (cb3_011x);
  float _1194 = (cb3_013y) - (cb3_011y);
  float _1195 = (cb3_013z) - (cb3_011z);
  float _1196 = _1193 * _1162;
  float _1197 = _1194 * _1162;
  float _1198 = _1195 * _1162;
  float _1199 = _1196 + (cb3_011x);
  float _1200 = _1197 + (cb3_011y);
  float _1201 = _1198 + (cb3_011z);
  float _1202 = _1201 * _1181;
  float _1203 = _1183 * _1182;
  float _1204 = _1202 + _1203;
  float _1205 = _1204 * _1201;
  float _1206 = _1199 * _1184;
  float _1207 = _1205 + _1206;
  float _1208 = _1202 + _1182;
  float _1209 = _1208 * _1201;
  float _1210 = _1200 * _1184;
  float _1211 = _1209 + _1210;
  float _1212 = _1207 / _1211;
  float _1213 = _1199 / _1200;
  float _1214 = _1212 - _1213;
  float _1215 = 1.0f / _1214;
  float _1216 = _1154 * (TEXCOORD.z);
  float _1217 = _1155 * (TEXCOORD.z);
  float _1218 = _1156 * (TEXCOORD.z);

  // not tonemapped
  float _1249, _1250, _1251;
  if (RENODX_TONE_MAP_TYPE == 0) {
    float _1219 = max(0.0f, _1216);
    float _1220 = max(0.0f, _1217);
    float _1221 = max(0.0f, _1218);
    float _1222 = _1219 * _1181;
    float _1223 = _1220 * _1181;
    float _1224 = _1221 * _1181;
    float _1225 = _1222 + _1203;
    float _1226 = _1223 + _1203;
    float _1227 = _1224 + _1203;
    float _1228 = _1225 * _1219;
    float _1229 = _1226 * _1220;
    float _1230 = _1227 * _1221;
    float _1231 = _1228 + _1206;
    float _1232 = _1229 + _1206;
    float _1233 = _1230 + _1206;
    float _1234 = _1222 + _1182;
    float _1235 = _1223 + _1182;
    float _1236 = _1224 + _1182;
    float _1237 = _1234 * _1219;
    float _1238 = _1235 * _1220;
    float _1239 = _1236 * _1221;
    float _1240 = _1237 + _1210;
    float _1241 = _1238 + _1210;
    float _1242 = _1239 + _1210;
    float _1243 = _1231 / _1240;
    float _1244 = _1232 / _1241;
    float _1245 = _1233 / _1242;
    float _1246 = _1243 - _1213;
    float _1247 = _1244 - _1213;
    float _1248 = _1245 - _1213;
    _1249 = _1246 * _1215;
    _1250 = _1247 * _1215;
    _1251 = _1248 * _1215;
  } else {
    _1249 = _1216, _1250 = _1217, _1251 = _1218;
  }
  // remove saturate()
  float _1252 = (_1249);
  float _1253 = (_1250);
  float _1254 = (_1251);

  float grayscale = renodx::color::y::from::BT709(float3(_1252, _1253, _1254));
  float _1258 = _1252 - grayscale;
  float _1259 = _1253 - grayscale;
  float _1260 = _1254 - grayscale;
  float _1261 = (cb3_067x)*_1258;
  float _1262 = (cb3_067x)*_1259;
  float _1263 = (cb3_067x)*_1260;
  float _1264 = _1261 + grayscale;
  float _1265 = _1262 + grayscale;
  float _1266 = _1263 + grayscale;
  float _1269 = grayscale / (cb3_066w);
  float _1270 = saturate(_1269);
  float _1278 = (cb3_065x) - (cb3_066x);
  float _1279 = (cb3_065y) - (cb3_066y);
  float _1280 = (cb3_065z) - (cb3_066z);
  float _1281 = _1278 * _1270;
  float _1282 = _1279 * _1270;
  float _1283 = _1280 * _1270;
  float _1284 = _1281 + (cb3_066x);
  float _1285 = _1282 + (cb3_066y);
  float _1286 = _1283 + (cb3_066z);
  float _1287 = _1284 * _1264;
  float _1288 = _1285 * _1265;
  float _1289 = _1286 * _1266;
  float _1291 = grayscale + -1.0f;
  float _1292 = _1291 + (cb3_065w);
  float _1293 = max(0.009999999776482582f, (cb3_065w));
  float _1294 = _1292 / _1293;
  float _1295 = saturate(_1294);
  float _1296 = _1264 - _1287;
  float _1297 = _1265 - _1288;
  float _1298 = _1266 - _1289;
  float _1299 = _1296 * _1295;
  float _1300 = _1297 * _1295;
  float _1301 = _1298 * _1295;
  float _1302 = _1299 + _1287;
  float _1303 = _1300 + _1288;
  float _1304 = _1301 + _1289;

  float3 linear_color = float3(_1302, _1303, _1304);                     // remove abs() and saturate()
  float3 gamma_color = renodx::math::SignPow(linear_color, 1.f / 2.2f);  // force 1.f / 2.2f instead of cb3_067y
  float _1318 = gamma_color.r, _1319 = gamma_color.g, _1320 = gamma_color.b;
  float _1324 = (cb3_063w) + (TEXCOORD.y);
  float _1325 = _1324 * (cb3_063y);
  float _1326 = sin(_1325);
  float _1327 = _1326 * 0.5f;
  float _1328 = _1327 + 0.5f;
  float _1330 = _1328 * (cb3_063x);
  float _1332 = (cb3_063w) * 0.5f;
  float _1333 = _1332 + (TEXCOORD.y);
  float _1334 = _1333 * (cb3_063z);
  float _1335 = sin(_1334);
  float _1336 = _1335 * 0.5f;
  float _1337 = _1336 + 0.5f;
  float _1338 = _1337 * (cb3_063x);
  float _1339 = 1.0f - _1330;
  float _1340 = _1339 - _1338;
  float _1341 = _1340 * _1318;
  float _1342 = _1340 * _1319;
  float _1343 = _1340 * _1320;
  float _1344 = (TEXCOORD.x) * 1.600000023841858f;
  float _1345 = (TEXCOORD.y) * 0.8999999761581421f;
  float _1348 = _1344 * (cb3_015w);
  float _1349 = _1345 * (cb3_015w);
  float _1352 = _1348 + (cb3_015x);
  float _1353 = _1349 + (cb3_015y);
  float _1354 = frac(_1352);
  float _1355 = frac(_1353);
  float4 _1356 = t4.Sample(s6, float2(_1354, _1355));
  float _1358 = (_1356.w) + -0.5f;
  float _1360 = _1358 * (cb3_015z);
  float _1361 = _1360 + _1341;
  float _1362 = _1360 + _1342;
  float _1363 = _1360 + _1343;

  // remove saturate
  float _1367 = (_1361);
  float _1368 = (_1362);
  float _1369 = (_1363);
  float _1370 = renodx::color::luma::from::BT601(float3(_1367, _1368, _1369));
  _1459 = _1367;
  _1460 = _1368;
  _1461 = _1369;

  if (bool(asint(cb3_089x))) {  // noise/dithering/grain
    if (CUSTOM_FILM_GRAIN_TYPE) {
      float3 grained_color = renodx::effects::ApplyFilmGrain(
          float3(_1459, _1460, _1461),
          float2(_1354, _1355),
          _1354,
          CUSTOM_FILM_GRAIN_STRENGTH * 0.0125f,
          1.f);
      _1459 = grained_color.r, _1460 = grained_color.g, _1461 = grained_color.b;
    } else {
      int _1378 = asint((cb3_092w));
      bool _1379 = (_1378 != 0);
      float _1380 = max(_1368, _1369);
      float _1381 = max(_1367, _1380);
      float _1382 = (_1379 ? _1367 : _1381);
      float _1383 = (_1379 ? _1368 : _1381);
      float _1384 = (_1379 ? _1369 : _1381);
      float _1389 = _1382 - (cb3_093x);
      float _1390 = _1383 - (cb3_093y);
      float _1391 = _1384 - (cb3_093z);
      float _1395 = _1389 * (cb3_092x);
      float _1396 = _1390 * (cb3_092y);
      float _1397 = _1391 * (cb3_092z);
      float _1398 = saturate(_1395);
      float _1399 = saturate(_1396);
      float _1400 = saturate(_1397);
      float _1402 = log2(_1398);
      float _1403 = log2(_1399);
      float _1404 = log2(_1400);
      float _1405 = _1402 * (cb3_093w);
      float _1406 = _1403 * (cb3_093w);
      float _1407 = _1404 * (cb3_093w);
      float _1408 = exp2(_1405);
      float _1409 = exp2(_1406);
      float _1410 = exp2(_1407);
      float _1419 = (cb3_091x) - (cb3_090x);
      float _1420 = (cb3_091y) - (cb3_090y);
      float _1421 = (cb3_091z) - (cb3_090z);
      float _1422 = _1419 * _1408;
      float _1423 = _1420 * _1409;
      float _1424 = _1421 * _1410;
      float _1425 = _1422 + (cb3_090x);
      float _1426 = _1423 + (cb3_090y);
      float _1427 = _1424 + (cb3_090z);
      uint _1428 = uint((SV_Position.x));
      uint _1429 = uint((SV_Position.y));
      int _1432 = _1428 & 63;
      int _1433 = _1429 & 63;
      int _1434 = ((uint)(cb2_022y)) & 31;
      float _1435 = t0.Load(int4(_1432, _1433, _1434, 0));
      float _1437 = (_1435.x) * 2.0f;
      float _1438 = _1437 + -1.0f;
      bool _1439 = (_1438 > 0.0f);
      bool _1440 = (_1438 < 0.0f);
      int _1441 = (uint)(_1439);
      int _1442 = (uint)(_1440);
      int _1443 = _1441 - _1442;
      float _1444 = float(_1443);
      float _1445 = abs(_1438);
      float _1446 = 1.0f - _1445;
      float _1447 = sqrt(_1446);
      float _1448 = 1.0f - _1447;
      float _1449 = _1448 * _1425;

      float _1450 = _1449 * _1444;
      float _1451 = _1448 * _1426;
      float _1452 = _1451 * _1444;
      float _1453 = _1448 * _1427;
      float _1454 = _1453 * _1444;

      _1450 *= CUSTOM_FILM_GRAIN_STRENGTH, _1452 *= CUSTOM_FILM_GRAIN_STRENGTH, _1454 *= CUSTOM_FILM_GRAIN_STRENGTH;

      float _1455 = _1450 + _1367;
      float _1456 = _1452 + _1368;
      float _1457 = _1454 + _1369;
      _1459 = _1455;
      _1460 = _1456;
      _1461 = _1457;
    }
  }
  SV_Target.x = _1459;
  SV_Target.y = _1460;
  SV_Target.z = _1461;
  SV_Target.w = _1370;
  return SV_Target;
}
